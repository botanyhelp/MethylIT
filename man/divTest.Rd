% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/divTest.R
\name{divTest}
\alias{divTest}
\title{Group Comparisons of Information Divergences Based on Generalized
    Linear Model}
\usage{
divTest(GR, control.names, treatment.names, glm.family = Gamma(link =
  "log"), var.weights = FALSE, weights = NULL, varFilter = 0,
  meanFilter = 0, FilterLog2FC = TRUE, Minlog2FC = 1,
  divPerBp = 0.001, minInd = 2, pAdjustMethod = NULL, scaling = 1L,
  pvalCutOff = 0.05, saveAll = FALSE, num.cores = 1, tasks = 0L,
  verbose = TRUE, ...)
}
\arguments{
\item{GR}{GRanges objects including control and treatment samples containing
an information divergence of methylation levels. The names for each 
column must coincide with the names given for parameters: 
'control.names' and 'treatment.names'.}

\item{control.names}{Names/IDs of the control samples, which must be 
included in the variable GR in a metacolumn.}

\item{treatment.names}{Names/IDs of the treatment samples, which must be
included in the variable GR in a metacolumn.}

\item{glm.family, link}{Parameter to be passed to function
\code{\link[stats]{glm}}. A description of the error distribution and
link function to be used in the model. For \code{\link[stats]{glm}} this
can be a character string naming a family function, or the result of a 
call to a family function. For \code{\link[stats]{glm}}.fit only the 
third option is supported. (See\code{\link[stats]{family}} function). 
Default: glm.family=Gamma(link ="log").}

\item{var.weights}{Logical (default: FALSE). Whether to use group variances 
as weights.}

\item{weights}{An optional list of two numeric vectors of ‘prior weights’ to
be used in the fitting process. One vector of weights for the control 
and one for the treatment. Each vector with length equal to length(GR)
(default: NULL). Non-NULL weights can be used to indicate that different
observations have different dispersions (with the values in weights 
being inversely proportional to the dispersions).}

\item{varFilter}{Numeric (default: 0). GLM will be performed only for those
rows (ranges denoting genomic regions) where the group variance is
greater the number specified by varFilter.}

\item{meanFilter}{Numeric (default: 0). GLM will be performed only for those
rows (ranges denoting genomic regions) where the absolute difference of
group means is  greater the number specified by meanFilter.}

\item{FilterLog2FC}{if TRUE, the results are filtered using the minimun
absolute value of log2FoldChanges observed to accept that a gene in the
treatment is differentially expressed in respect to the control.}

\item{Minlog2FC}{minimum logarithm base 2 of fold changes}

\item{divPerBp}{At least for one group the mean divergence per bp must be
equal to or greater than 'divPerBp' (default divPerBp = 0.001).}

\item{minInd}{Integer (Default: 2). At least one group must have 'minInd'
individuals with a divergence value greater than zero.}

\item{pAdjustMethod}{Method used to adjust the results; default: "NULL"
(see \code{\link[stats]{p.adjust}}.methods). The p-value adjustment is
performed using function \code{\link[stats]{p.adjust}}.}

\item{scaling}{integer (default 1). Scaling factor estimate the
signal density as: scaling * "DIMP-Count-Per-Bp". For example,
if scaling = 1000, then signal density denotes the number of DIMPs in
 1000 bp.}

\item{pvalCutOff}{cutoff used then a p-value adjustment is performed}

\item{saveAll}{if TRUE all the temporal results that passed filters
'varFilter' and are 'meanFilter' returned. If FALSE, only the 
comparisons that passed filters 'varFilter', 'meanFilter', and 
pvalue < pvalCutOff or adj.pvalue < pvalCutOff (if pAdjustMethod is not 
NULL) are returned.}

\item{tasks}{integer(1). The number of tasks per job.  Value must be a scalar
integer >= 0L. In this documentation a job is defined as a single call to
a function, such as bplapply, bpmapply etc. A task is the division of the
X argument into chunks. When tasks == 0 (default), X is divided as evenly
as possible over the number of workers (see
\code{\link[BiocParallel]{MulticoreParam-class}} from BiocParallel
package).}

\item{verbose}{if TRUE, prints the function log to stdout}

\item{...}{Additional parameters passed to \code{\link[stats]{glm}} function.}

\item{mc.cores}{The number of cores to use, i.e. at most how many child
processes will be run simultaneously (see
\code{\link[BiocParallel]{bplapply}} function from BiocParallel).}
}
\value{
The original GRanges object with the columns "beta", "log2FC",
    "pvalue", "adj.pval" (if pAdjustMethod requested), "CT.divPerBp" and
    "TT.divPerBp" (divergence per base pairs), and "divPerBpVariation added.
}
\description{
Generalized Linear Model for group comparison of information
    divergence variables yielded by MethylIT output. Basically, this a
    wrapping function to perform the fitting of generalized linear models 
    with \code{\link[stats]{glm}} from 'stats' package to any variable of 
    interest given in GRanges objects of MethylIT output.
}
\details{
The default parameter setting glm.family = Gamma(link = "log") is
    thought to perform the group comparison of the sums of absolute
    differences of methylation levels (total variation distance (TVD) at
    gene-body DIMPs on DMGs). The sums of Hellinger divergence (HD, at
    gene-body DIMPs on DMGs) can be tested with this setting as well. Both 
    TVD and HD follow asymptotic Chi-square distribution and, consequently,
    so do the sum of TVD and the sum of HD.  The Chi-square distribution is 
    a particular case of Gamma distribution: \cr
        \deqn{f(x|a,s) = 1/(s^a Gamma(a)) x^(a-1) e^-(x/s)}
    Chi-square density is derived after replacing a = n/2 and s = 2: \cr
        \deqn{f(x|n) = 1/(2^(n/2) Γ(n/2)) x^(n/2-1) e^(-x/2)}
}
\examples{
num.cyt <- 11001 #' Number of cytosine position with methylation call
max.cyt = 14000
## Gene annotation
genes <- GRanges(seqnames = "1",
                 ranges = IRanges(start = c(3631, 6788, 11649),
                                  end = c(5899, 9130, 13714)),
                 strand = c("+", "-", "-"))
mcols(genes) <- data.frame(gene_id = c("AT1G01010", "AT1G01020",
                                       "AT1G01030"))

set.seed(123) #''#'' To set a seed for random number generation
## GRanges object of the reference with methylation levels in
## its meta-column
Ref <- makeGRangesFromDataFrame(
  data.frame(chr = '1',
             start = 3000:max.cyt,
             end = 3000:max.cyt,
             strand = '*',
             p1 = rbeta(num.cyt, shape1 = 1, shape2 = 1.5)),
  keep.extra.columns = TRUE)

## List of Granges objects of individuals methylation levels
Indiv <- GRangesList(
  sample11 = makeGRangesFromDataFrame(
    data.frame(chr = '1',
               start = 3000:max.cyt,
               end = 3000:max.cyt,
               strand = '*',
               p2 = rbeta(num.cyt, shape1 = 1.5, shape2 = 2)),
    keep.extra.columns = TRUE),
  sample12 = makeGRangesFromDataFrame(
    data.frame(chr = '1',
               start = 3000:max.cyt,
               end = 3000:max.cyt,
               strand = '*',
               p2 = rbeta(num.cyt, shape1 = 1.6, shape2 = 2.1)),
    keep.extra.columns = TRUE),
  sample21 = makeGRangesFromDataFrame(
    data.frame(chr = '1',
               start = 3000:max.cyt,
               end = 3000:max.cyt,
               strand = '*',
               p2 = rbeta(num.cyt, shape1 = 10, shape2 = 4)),
    keep.extra.columns = TRUE),
  sample22 = makeGRangesFromDataFrame(
    data.frame(chr = '1',
               start = 3000:max.cyt,
               end = 3000:max.cyt,
               strand = '*',
               p2 = rbeta(num.cyt, shape1 = 11, shape2 = 4)),
    keep.extra.columns = TRUE))
## To estimate Hellinger divergence using only the methylation levels.
HD <- estimateDivergence(ref = Ref, indiv = Indiv, meth.level = TRUE,
                         columns = 1)
## To perform the nonlinear regression analysis
nlms <- nonlinearFitDist(HD, column = 4, verbose = FALSE)

## Next, the potential signal can be estimated
PS <- getPotentialDIMP(LR = HD, nlms = nlms, div.col = 4, alpha = 0.05)

## The cutpoint estimation used to discriminate the signal from the noise
cutpoints <- estimateCutPoint(PS, control.names = c("sample11", "sample12"),
                              treatment.names = c("sample21", "sample22"),
                              div.col = 4, verbose = TRUE)
## DIMPs are selected using the cupoints
DIMPs <- selectDIMP(PS, div.col = 4, cutpoint = min(cutpoints$cutpoint))

## Finally DIMPs statistics genes
tv_DIMPs = getGRegionsStat(GR = DIMPs, grfeatures = genes, stat = "sum",
                           absolute = TRUE, column = 3L)

GR_tv_DIMP = uniqueGRanges(tv_DIMPs, type = "equal", chromosomes = "1")
colnames(mcols(GR_tv_DIMP)) <-  c("sample11", "sample12", "sample21",
                                  "sample22")
divTest(GR=GR_tv_DIMP, control.names = c("sample11", "sample12"),
          treatment.names = c("sample21", "sample22"))
}
