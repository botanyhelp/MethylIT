% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimateCutPoint.R
\name{estimateCutPoint}
\alias{estimateCutPoint}
\title{Estimate cutpoints to distinguish the treatment methylation signal
    from the control}
\usage{
estimateCutPoint(LR, control.names, treatment.names, simple = TRUE,
  column = c(hdiv = FALSE, TV = FALSE, wprob = FALSE, pos = FALSE),
  classifier1 = c("logistic", "pca.logistic", "lda", "qda", "pca.lda",
  "pca.qda"), classifier2 = NULL, post.cut = 0.5, clas.perf = FALSE,
  prop = 0.6, tv.cut = 0.25, n.pc = 1, find.cut = FALSE,
  cut.interval = c(0.5, 0.8), cut.incr = 0.01, stat = 1,
  num.cores = 1L, tasks = 0L, tol = .Machine$double.eps^0.5,
  verbose = TRUE, ...)
}
\arguments{
\item{LR}{A list of GRanges objects containing a divergence variable used to
perform ROC analysis and estimate the cutpoint}

\item{control.names}{Names/IDs of the control samples. Each GRanges object
must correspond to a sample, for example, sample 's1'. Then this sample
can be accessed in the list of GRanges objects as LR$s1.}

\item{treatment.names}{Same type and function as 'control.names'.}

\item{verbose}{If TRUE, prints the function log to stdout.}

\item{div.col}{Column number for divergence variable used in the ROC
analysis and estimation of the cutpoints.}

\item{absolute}{Logic (default, FALSE). Total variation (TV, the difference
of methylation levels) is normally an output in the downstream MathylIT
analysis. If 'absolute = TRUE', then TV is tranformed into |TV|, which is
an information divergence that can be fitted to Weibull or to Generalized
Gamma distribution. So, if the nonlinear fit was performed for |TV|, then
here absolute must be turned TRUE.}

\item{grouping}{Logic (default, FALSE). If TRUE, then all control samples are
grouped into one set, and the same for the treatment samples. The new
samples are named: 'ctrl' and 'treat' and, consequently, only a cutpoint
(treat' versus 'ctrl') is estimated.}
}
\value{
A list of three matrices cutpoint matrix values, AUC matrix values,
    and accuracy matrices values. These matrices values derives from all
    possible ROC analysis: control sample_i versus treatment sample_j (i,j =
    1,2, ...).
}
\description{
Given a list of two GRanges objects, control and treatment,
    carrying the potential signals (prior classification) from controls and
    treatments in terms of an information divergence
    (given the meta-columns), the function estimates the cutpoints of the
    control group versus treatment group.
}
\details{
The function performs an estimation of the optimal cutpoint from
    the area under the curve (AUC) of a receiver operating characteristic
    (ROC) and the accuracy for the classification of the cytosine positions
    based on the cutpoint into two classes: DIMPs from control and DIMPs
    from treatment.

    In this context, the AUC is the probability of being able to distinguish
    the biological regulatory signal naturally generated in the control from
    that one induced by the treatment. The cytosine sites carrying a
    methylation signal shall be called differentially informative methylated
    positions (DIMP). Now, the probability that a DIMP is not induced by the
    treatment is given by the probability of false alarm
    (PFA, false positive). That is, the biological signal is naturally
    present in the control as well as in the treatment.
}
\examples{

    set.seed(123)
    num.points <- 1000

    ## A list of GRanges objects with simulated Hellinger divergences in
    ## their metacolumns.
    HD <- GRangesList(
        sample1 = makeGRangesFromDataFrame(
                    data.frame(chr = "chr1", start = 1:num.points,
                            end = 1:num.points, strand = '*',
                            hdiv = rweibull(1:num.points, shape = 0.45,
                                    scale = 0.2)),
                    keep.extra.columns = TRUE),
        sample2 = makeGRangesFromDataFrame(
                    data.frame(chr = "chr1", start = 1:num.points,
                            end = 1:num.points, strand = '*',
                            hdiv = rweibull(1:num.points, shape = 0.75,
                                    scale = 1)),
                    keep.extra.columns = TRUE))

    ## Nonlinear fit of Weiblul distribution
    nlms <- nonlinearFitDist(HD, column = 1, verbose = FALSE)

    ## Estimation of the potential signal and cutpoints
    PS <- getPotentialDIMP(LR = HD, nlms = nlms, div.col = 1, alpha = 0.05)
    cutpoints <- estimateCutPoint(PS, control.names = "sample1",
                                    treatment.names = c("sample2"),
                                    div.col = 1, verbose = FALSE)
# Let's add an empty GRanges
PS$sample1.1 <- GRanges()
# The empty GRanges will be ignored
cutpoints <- estimateCutPoint(PS, control.names = c("sample1", "sample1.1"),
                              treatment.names = c("sample2"),
                              div.col = 1, verbose = FALSE)
# Let's make both control GRanges empty.
PS$sample1 <- GRanges()
# Warning is given
cutpoints <- estimateCutPoint(PS, control.names = c("sample1", "sample1.1"),
                              treatment.names = c("sample2"),
                              div.col = 1, verbose = FALSE)
# Let's make the treatment GRange empty.
PS$sample2 <- GRanges()
# The error is reported
cutpoints <- estimateCutPoint(PS, control.names = c("sample1", "sample1.1"),
                              treatment.names = c("sample2"),
                              div.col = 1, verbose = FALSE)
}
