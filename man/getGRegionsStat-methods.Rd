% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getGRegionsStat-methods.R
\docType{methods}
\name{getGRegionsStat-methods}
\alias{getGRegionsStat-methods}
\alias{getGRegionsStat}
\alias{getGRegionsStat,GRanges-method}
\alias{getGRegionsStat,list-method}
\alias{getGRegionsStat,}
\alias{list-method}
\alias{getGRegionsStat,GRangesList-method}
\alias{GRangesList-method}
\alias{getGRegionsStat,CompressedGRangesList-method}
\title{Statistic of Genomic Regions}
\usage{
getGRegionsStat(GR, win.size = 350, step.size = 350,
  grfeatures = NULL, stat = c("sum", "mean", "gmaean", "median",
  "density"), absolute = FALSE, select.strand = NULL, column = 1L,
  prob = FALSE, entropy = FALSE, maxgap = -1L, minoverlap = 0L,
  scaling = 1000L, logbase = 2, type = c("any", "start", "end",
  "within", "equal"), ignore.strand = FALSE, na.rm = TRUE)

\S4method{getGRegionsStat}{GRanges}(GR, win.size = 350,
  step.size = 350, grfeatures = NULL, stat = c("sum", "mean",
  "gmaean", "median", "density"), absolute = FALSE,
  select.strand = NULL, column = 1L, prob = FALSE, entropy = FALSE,
  maxgap = -1L, minoverlap = 0L, scaling = 1000L, logbase = 2,
  type = c("any", "start", "end", "within", "equal"),
  ignore.strand = FALSE, na.rm = TRUE)

\S4method{getGRegionsStat}{list}(GR, win.size = 350, step.size = 350,
  grfeatures = NULL, stat = c("sum", "mean", "gmaean", "median",
  "density"), absolute = FALSE, select.strand = NULL, column = 1L,
  prob = FALSE, entropy = FALSE, maxgap = -1L, minoverlap = 0L,
  scaling = 1000L, logbase = 2, type = c("any", "start", "end",
  "within", "equal"), ignore.strand = FALSE, na.rm = TRUE)

\S4method{getGRegionsStat}{GRangesList}(GR, win.size = 350,
  step.size = 350, grfeatures = NULL, stat = c("sum", "mean",
  "gmaean", "median", "density"), absolute = FALSE,
  select.strand = NULL, column = 1L, prob = FALSE, entropy = FALSE,
  maxgap = -1L, minoverlap = 0L, scaling = 1000L, logbase = 2,
  type = c("any", "start", "end", "within", "equal"),
  ignore.strand = FALSE, na.rm = TRUE)

\S4method{getGRegionsStat}{CompressedGRangesList}(GR, win.size = 350,
  step.size = 350, grfeatures = NULL, stat = c("sum", "mean",
  "gmaean", "median", "density"), absolute = FALSE,
  select.strand = NULL, column = 1L, prob = FALSE, entropy = FALSE,
  maxgap = -1L, minoverlap = 0L, scaling = 1L, logbase = 2,
  type = c("any", "start", "end", "within", "equal"),
  ignore.strand = FALSE, na.rm = TRUE)
}
\arguments{
\item{GR}{A Grange object with the variable of interest in its metacolumn.}

\item{win.size}{An integer for the size of the windows/regions size of the
intervals of genomics regions.}

\item{step.size}{Interval at which the regions/windows must be defined}

\item{grfeatures}{A GRanges object corresponding to an annotated genomic
feature. For example, gene region, transposable elements, exons,
intergenic region, etc. If provided, then parameters 'win.size' and
step.size are ignored and the statistics are estimated for 'grfeatures'.}

\item{stat}{Statistic used to estimate the summarized value of the variable
of interest in each interval/window. Posible options are: "mean",
geometric mean ("gmean"), "median", "density", and "sum" (default). Here,
we define "density" as the sum of values from the variable of interest
in the given region devided by the length of the region.}

\item{absolute}{Optional. Logic (default: FALSE). Whether to use the absolute
values of the variable provided}

\item{select.strand}{Optional. If provided,"+" or "-", then the summarized
statistic is computed only for the specified DNA chain.}

\item{column}{Integer number denoting the column where the variable of
interest is located in the metacolumn of the GRanges object or an integer
vector of two elements (only if prob = TRUE).}

\item{prob}{Logic. If TRUE and the variable of interest has values between
zero and 1, then the summarized statistic is comuputed using Fisher's
transformation. If length(column) == 2, say with colums x1 and x2, then
the variable of interest will be p = x1/(x1 + x2). For example, if x1
and x2 are methylated and unmethylated read counts, respectively, then p
is the methylation level.}

\item{entropy}{Logic. Whether to compute the entropy when prob == TRUE.}

\item{maxgap, minoverlap, type}{See ?findOverlaps in the IRanges package for a
description of these arguments.}

\item{scaling}{integer (default 1). Scaling factor to be used when
stat = "density". For example, if scaling = 1000, then density * scaling
denotes the sum of values in 1000 bp.}

\item{logbase}{A positive number: the base with respect to which logarithms}

\item{ignore.strand}{When set to TRUE, the strand information is ignored in
the overlap calculations.}

\item{na.rm}{Logical value. If TRUE, the NA values will be removed}
}
\value{
A GRanges object with the new genomic regions and their corresponding
    summarized statistic.
}
\description{
A function to estimate the centrality measures of a specified
    variable given in GRanges object (a column from the metacolums of the
    GRanges object) after split the GRanges object into intervals.
}
\details{
This function split a Grange object into intervals genomic regions
    (GR) of fixed size (as given in function "tileMethylCounts2" R package
    methylKit, with small changes). A summarized statistic (mean, median,
    geometric mean or sum) is calculated for the specified variable values
    from each region. Notice that if win.size == step.size, then
    non-overlapping windows are obtained.
}
\examples{
gr <- GRanges(seqnames = Rle( c("chr1", "chr2", "chr3", "chr4"),
            c(5, 5, 5, 5)),
            ranges = IRanges(start = 1:20, end = 1:20),
            strand = rep(c("+", "-"), 10),
            GC = seq(1, 0, length = 20))
grs <- getGRegionsStat(gr, win.size = 4, step.size = 4)
grs

## Selecting the positive strand
grs <- getGRegionsStat(gr, win.size = 4, step.size = 4, select.strand = "+")
grs

## Selecting the negative strand
grs <- getGRegionsStat(gr, win.size = 4, step.size = 4, select.strand = "-")
grs

## Operating over a list of GRanges objects
gr2 <- GRanges(seqnames = Rle( c("chr1", "chr2", "chr3", "chr4"),
                            c(5, 5, 5, 5)),
                ranges = IRanges(start = 1:20, end = 1:20),
                strand = rep(c("+", "-"), 10),
                GC = runif(20))

grs <- getGRegionsStat(list(gr1 = gr, gr2 = gr2), win.size = 4, step.size = 4)
}
\author{
Robersy Sanchez
}
